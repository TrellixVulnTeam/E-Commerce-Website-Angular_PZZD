{"version":3,"file":"ngrx-component-store.js","sources":["../../../../modules/component-store/src/debounce-sync.ts","../../../../modules/component-store/src/component-store.ts","../../../../modules/component-store/src/tap-response.ts","../../../../modules/component-store/index.ts","../../../../modules/component-store/ngrx-component-store.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license MIT License\n *\n * Copyright (c) 2017-2020 Nicholas Jamieson and contributors\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\n\nimport {\n  asapScheduler,\n  MonoTypeOperatorFunction,\n  Observable,\n  Subscription,\n} from 'rxjs';\n\nexport function debounceSync<T>(): MonoTypeOperatorFunction<T> {\n  return (source) =>\n    new Observable<T>((observer) => {\n      let actionSubscription: Subscription | undefined;\n      let actionValue: T | undefined;\n      const rootSubscription = new Subscription();\n      rootSubscription.add(\n        source.subscribe({\n          complete: () => {\n            if (actionSubscription) {\n              observer.next(actionValue);\n            }\n            observer.complete();\n          },\n          error: (error) => {\n            observer.error(error);\n          },\n          next: (value) => {\n            actionValue = value;\n            if (!actionSubscription) {\n              actionSubscription = asapScheduler.schedule(() => {\n                observer.next(actionValue);\n                actionSubscription = undefined;\n              });\n              rootSubscription.add(actionSubscription);\n            }\n          },\n        })\n      );\n      return rootSubscription;\n    });\n}\n","import {\n  isObservable,\n  Observable,\n  of,\n  ReplaySubject,\n  Subscription,\n  throwError,\n  combineLatest,\n  Subject,\n  queueScheduler,\n  scheduled,\n} from 'rxjs';\nimport {\n  concatMap,\n  takeUntil,\n  withLatestFrom,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n  take,\n} from 'rxjs/operators';\nimport { debounceSync } from './debounce-sync';\nimport {\n  Injectable,\n  OnDestroy,\n  Optional,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\n\nexport interface SelectConfig {\n  debounce?: boolean;\n}\n\nexport const INITIAL_STATE_TOKEN = new InjectionToken(\n  '@ngrx/component-store Initial State'\n);\n\nexport type SelectorResults<Selectors extends Observable<unknown>[]> = {\n  [Key in keyof Selectors]: Selectors[Key] extends Observable<infer U>\n    ? U\n    : never;\n};\n\nexport type Projector<Selectors extends Observable<unknown>[], Result> = (\n  ...args: SelectorResults<Selectors>\n) => Result;\n\n@Injectable()\nexport class ComponentStore<T extends object> implements OnDestroy {\n  // Should be used only in ngOnDestroy.\n  private readonly destroySubject$ = new ReplaySubject<void>(1);\n  // Exposed to any extending Store to be used for the teardown.\n  readonly destroy$ = this.destroySubject$.asObservable();\n\n  private readonly stateSubject$ = new ReplaySubject<T>(1);\n  private isInitialized = false;\n  private notInitializedErrorMessage =\n    `${this.constructor.name} has not been initialized yet. ` +\n    `Please make sure it is initialized before updating/getting.`;\n  // Needs to be after destroy$ is declared because it's used in select.\n  readonly state$: Observable<T> = this.select((s) => s);\n\n  constructor(@Optional() @Inject(INITIAL_STATE_TOKEN) defaultState?: T) {\n    // State can be initialized either through constructor or setState.\n    if (defaultState) {\n      this.initState(defaultState);\n    }\n  }\n\n  /** Completes all relevant Observable streams. */\n  ngOnDestroy() {\n    this.stateSubject$.complete();\n    this.destroySubject$.next();\n  }\n\n  /**\n   * Creates an updater.\n   *\n   * Throws an error if updater is called with synchronous values (either\n   * imperative value or Observable that is synchronous) before ComponentStore\n   * is initialized. If called with async Observable before initialization then\n   * state will not be updated and subscription would be closed.\n   *\n   * @param updaterFn A static updater function that takes 2 parameters (the\n   * current state and an argument object) and returns a new instance of the\n   * state.\n   * @return A function that accepts one argument which is forwarded as the\n   *     second argument to `updaterFn`. Every time this function is called\n   *     subscribers will be notified of the state change.\n   */\n  updater<\n    // Allow to force-provide the type\n    ProvidedType = void,\n    // This type is derived from the `value` property, defaulting to void if it's missing\n    OriginType = ProvidedType,\n    // The Value type is assigned from the Origin\n    ValueType = OriginType,\n    // Return either an empty callback or a function requiring specific types as inputs\n    ReturnType = OriginType extends void\n      ? () => void\n      : (observableOrValue: ValueType | Observable<ValueType>) => Subscription\n  >(updaterFn: (state: T, value: OriginType) => T): ReturnType {\n    return ((\n      observableOrValue?: OriginType | Observable<OriginType>\n    ): Subscription => {\n      let initializationError: Error | undefined;\n      // We can receive either the value or an observable. In case it's a\n      // simple value, we'll wrap it with `of` operator to turn it into\n      // Observable.\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      const subscription = observable$\n        .pipe(\n          concatMap((value) =>\n            this.isInitialized\n              ? // Push the value into queueScheduler\n                scheduled([value], queueScheduler).pipe(\n                  withLatestFrom(this.stateSubject$)\n                )\n              : // If state was not initialized, we'll throw an error.\n                throwError(new Error(this.notInitializedErrorMessage))\n          ),\n          takeUntil(this.destroy$)\n        )\n        .subscribe({\n          next: ([value, currentState]) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            this.stateSubject$.next(updaterFn(currentState, value!));\n          },\n          error: (error: Error) => {\n            initializationError = error;\n            this.stateSubject$.error(error);\n          },\n        });\n\n      if (initializationError) {\n        // prettier-ignore\n        throw /** @type {!Error} */ (initializationError);\n      }\n      return subscription;\n    }) as unknown as ReturnType;\n  }\n\n  /**\n   * Initializes state. If it was already initialized then it resets the\n   * state.\n   */\n  private initState(state: T): void {\n    scheduled([state], queueScheduler).subscribe((s) => {\n      this.isInitialized = true;\n      this.stateSubject$.next(s);\n    });\n  }\n\n  /**\n   * Sets the state specific value.\n   * @param stateOrUpdaterFn object of the same type as the state or an\n   * updaterFn, returning such object.\n   */\n  setState(stateOrUpdaterFn: T | ((state: T) => T)): void {\n    if (typeof stateOrUpdaterFn !== 'function') {\n      this.initState(stateOrUpdaterFn);\n    } else {\n      this.updater(stateOrUpdaterFn as (state: T) => T)();\n    }\n  }\n\n  /**\n   * Patches the state with provided partial state.\n   *\n   * @param partialStateOrUpdaterFn a partial state or a partial updater\n   * function that accepts the state and returns the partial state.\n   * @throws Error if the state is not initialized.\n   */\n  patchState(\n    partialStateOrUpdaterFn:\n      | Partial<T>\n      | Observable<Partial<T>>\n      | ((state: T) => Partial<T>)\n  ): void {\n    const patchedState =\n      typeof partialStateOrUpdaterFn === 'function'\n        ? partialStateOrUpdaterFn(this.get())\n        : partialStateOrUpdaterFn;\n\n    this.updater((state, partialState: Partial<T>) => ({\n      ...state,\n      ...partialState,\n    }))(patchedState);\n  }\n\n  protected get(): T;\n  protected get<R>(projector: (s: T) => R): R;\n  protected get<R>(projector?: (s: T) => R): R | T {\n    if (!this.isInitialized) {\n      throw new Error(this.notInitializedErrorMessage);\n    }\n    let value: R | T;\n\n    this.stateSubject$.pipe(take(1)).subscribe((state) => {\n      value = projector ? projector(state) : state;\n    });\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return value!;\n  }\n\n  /**\n   * Creates a selector.\n   *\n   * @param projector A pure projection function that takes the current state and\n   *   returns some new slice/projection of that state.\n   * @param config SelectConfig that changes the behavior of selector, including\n   *   the debouncing of the values until the state is settled.\n   * @return An observable of the projector results.\n   */\n  select<Result>(\n    projector: (s: T) => Result,\n    config?: SelectConfig\n  ): Observable<Result>;\n  select<Selectors extends Observable<unknown>[], Result>(\n    ...args: [...selectors: Selectors, projector: Projector<Selectors, Result>]\n  ): Observable<Result>;\n  select<Selectors extends Observable<unknown>[], Result>(\n    ...args: [\n      ...selectors: Selectors,\n      projector: Projector<Selectors, Result>,\n      config: SelectConfig\n    ]\n  ): Observable<Result>;\n  select<\n    Selectors extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,\n    Result,\n    ProjectorFn = (...a: unknown[]) => Result\n  >(...args: Selectors): Observable<Result> {\n    const { observables, projector, config } = processSelectorArgs<\n      Selectors,\n      Result\n    >(args);\n\n    let observable$: Observable<Result>;\n    // If there are no Observables to combine, then we'll just map the value.\n    if (observables.length === 0) {\n      observable$ = this.stateSubject$.pipe(\n        config.debounce ? debounceSync() : (source$) => source$,\n        map(projector)\n      );\n    } else {\n      // If there are multiple arguments, then we're aggregating selectors, so we need\n      // to take the combineLatest of them before calling the map function.\n      observable$ = combineLatest(observables).pipe(\n        config.debounce ? debounceSync() : (source$) => source$,\n        map((projectorArgs) => projector(...projectorArgs))\n      );\n    }\n\n    return observable$.pipe(\n      distinctUntilChanged(),\n      shareReplay({\n        refCount: true,\n        bufferSize: 1,\n      }),\n      takeUntil(this.destroy$)\n    );\n  }\n\n  /**\n   * Creates an effect.\n   *\n   * This effect is subscribed to throughout the lifecycle of the ComponentStore.\n   * @param generator A function that takes an origin Observable input and\n   *     returns an Observable. The Observable that is returned will be\n   *     subscribed to for the life of the component.\n   * @return A function that, when called, will trigger the origin Observable.\n   */\n  effect<\n    // This type quickly became part of effect 'API'\n    ProvidedType = void,\n    // The actual origin$ type, which could be unknown, when not specified\n    OriginType extends\n      | Observable<ProvidedType>\n      | unknown = Observable<ProvidedType>,\n    // Unwrapped actual type of the origin$ Observable, after default was applied\n    ObservableType = OriginType extends Observable<infer A> ? A : never,\n    // Return either an empty callback or a function requiring specific types as inputs\n    ReturnType = ProvidedType | ObservableType extends void\n      ? () => void\n      : (\n          observableOrValue: ObservableType | Observable<ObservableType>\n        ) => Subscription\n  >(generator: (origin$: OriginType) => Observable<unknown>): ReturnType {\n    const origin$ = new Subject<ObservableType>();\n    generator(origin$ as OriginType)\n      // tied to the lifecycle 👇 of ComponentStore\n      .pipe(takeUntil(this.destroy$))\n      .subscribe();\n\n    return ((\n      observableOrValue?: ObservableType | Observable<ObservableType>\n    ): Subscription => {\n      const observable$ = isObservable(observableOrValue)\n        ? observableOrValue\n        : of(observableOrValue);\n      return observable$.pipe(takeUntil(this.destroy$)).subscribe((value) => {\n        // any new 👇 value is pushed into a stream\n        origin$.next(value as ObservableType);\n      });\n    }) as unknown as ReturnType;\n  }\n}\n\nfunction processSelectorArgs<\n  Selectors extends Array<Observable<unknown> | SelectConfig | ProjectorFn>,\n  Result,\n  ProjectorFn = (...a: unknown[]) => Result\n>(\n  args: Selectors\n): {\n  observables: Observable<unknown>[];\n  projector: ProjectorFn;\n  config: Required<SelectConfig>;\n} {\n  const selectorArgs = Array.from(args);\n  // Assign default values.\n  let config: Required<SelectConfig> = { debounce: false };\n  let projector: ProjectorFn;\n  // Last argument is either projector or config\n  const projectorOrConfig = selectorArgs.pop() as ProjectorFn | SelectConfig;\n\n  if (typeof projectorOrConfig !== 'function') {\n    // We got the config as the last argument, replace any default values with it.\n    config = { ...config, ...projectorOrConfig };\n    // Pop the next args, which would be the projector fn.\n    projector = selectorArgs.pop() as ProjectorFn;\n  } else {\n    projector = projectorOrConfig;\n  }\n  // The Observables to combine, if there are any.\n  const observables = selectorArgs as Observable<unknown>[];\n  return {\n    observables,\n    projector,\n    config,\n  };\n}\n","import { EMPTY, Observable } from 'rxjs';\n\nimport { catchError, tap } from 'rxjs/operators';\n\n/**\n * Handles the response in ComponentStore effects in a safe way, without\n * additional boilerplate.\n * It enforces that the error case is handled and that the effect would still be\n * running should an error occur.\n *\n * Takes an optional third argument for a `complete` callback.\n *\n * ```typescript\n * readonly dismissedAlerts = this.effect<Alert>(alert$ => {\n *  return alert$.pipe(\n *      concatMap(\n *          (alert) => this.alertsService.dismissAlert(alert).pipe(\n *              tapResponse(\n *                 (dismissedAlert) => this.alertDismissed(dismissedAlert),\n *                 (error: { message: string }) => this.logError(error.message),\n *              ))));\n *   });\n * ```\n */\nexport function tapResponse<T, E = unknown>(\n  nextFn: (next: T) => void,\n  errorFn: (error: E) => void,\n  completeFn?: () => void\n): (source: Observable<T>) => Observable<T> {\n  return (source) =>\n    source.pipe(\n      tap({\n        next: nextFn,\n        error: errorFn,\n        complete: completeFn,\n      }),\n      catchError(() => EMPTY)\n    );\n}\n","/**\n * DO NOT EDIT\n *\n * This file is automatically generated at build\n */\n\nexport * from './public_api';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}